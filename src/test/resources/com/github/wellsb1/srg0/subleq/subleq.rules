/*
  SUBLEQ - Subtract A from B if B <= 0 jump C

FROM: https://rosettacode.org/wiki/Subleq#Java
The program should load the initial contents of the emulated machine's memory, set the instruction pointer to the first address (which is defined to be address 0), and begin emulating the machine, which works as follows:
1. Let A be the value in the memory location identified by the instruction pointer;   let B and C be the values stored in the next two consecutive addresses in memory.
2. Advance the instruction pointer three words, to point at the address after the address containing C.
3. If A is   -1   (negative unity),   then a character is read from the machine's input and its numeric value stored in the address given by B.   C is unused.
4. If B is   -1   (negative unity),   then the number contained in the address given by A is interpreted as a character and written to the machine's output.   C is unused.
5. Otherwise, both A and B are treated as addresses.
    The number contained in address A is subtracted from the number in address B (and the difference left in address B).
    If the result is positive, execution continues uninterrupted; if the result is zero or negative, the number in C becomes the new instruction pointer.
6. If the instruction pointer becomes negative, execution halts.


state symbols
? - fetch a

?a -
?

States
-----------
 START
 END

 @[ - program counter start state initiate subleq
 ? - fetch A
 * - fetch B
 - - subtract A from B results into B


[] - a memory address
{} - register a
() - register b

s/a/b/0/1< - pushes a symbol to the start of the string stopping only
s0/1 - turn around symbol, you sent 0/1s to the left to start seeing the address, turns around as A/B to seek address
r0/1 - turn around symbol, you sent 0/0s to the left to then seek back to the next open register as C/D



A/B - travel right to the next memory address
X/Y - used to subtract/compare when seeking a memory address


*/

-- initiate operation at program counter

@[ -> F[

